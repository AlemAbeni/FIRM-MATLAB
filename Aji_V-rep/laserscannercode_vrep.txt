if (simGetScriptExecutionCount()==0) then
	laserHandle=simGetObjectHandle("LaserScannerLaser_2D")
	jointHandle=simGetObjectHandle("LaserScannerJoint_2D")
	graphHandle=simGetObjectHandle("LaserScannerGraph_2D")
	modelHandle=simGetObjectAssociatedWithScript(sim_handle_self)
	objName=simGetObjectName(modelHandle)
	communicationTube=simTubeOpen(0,objName..'_2D_SCANNER_DATA',1)
	pt_string = ""
end

--Table to string conversion
function table.val_to_str ( v )
  if "string" == type( v ) then
    v = string.gsub( v, "\n", "\\n" )
    if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
      return "'" .. v .. "'"
    end
    return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
  else
    return "table" == type( v ) and table.tostring( v ) or
      tostring( v )
  end
end

function table.key_to_str ( k )
  if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
    return k
  else
    return "[" .. table.val_to_str( k ) .. "]"
  end
end

function table.tostring( tbl )
  local result, done = {}, {}
  for k, v in ipairs( tbl ) do
    table.insert( result, table.val_to_str( v ) )
    done[ k ] = true
  end
  for k, v in pairs( tbl ) do
    if not done[ k ] then
      table.insert( result,
        table.key_to_str( k ) .. "=" .. table.val_to_str( v ) )
    end
  end
  return "{" .. table.concat( result, "," ) .. "}"
end

--end


simHandleChildScript(sim_handle_all_except_explicit)
scanningAngle=tonumber(simGetScriptSimulationParameter(sim_handle_self,"scanningAngle"))
if (scanningAngle==nil) then
	scanningAngle=180
	simSetScriptSimulationParameter(sim_handle_self,"scanningAngle",scanningAngle)
end
if (scanningAngle<5) then
	scanningAngle=5
end
if (scanningAngle>180) then
	scanningAngle=180
end
scanningDensity=tonumber(simGetScriptSimulationParameter(sim_handle_self,"scanningDensity"))
if (scanningDensity==nil) then
	scanningDensity=2
	simSetScriptSimulationParameter(sim_handle_self,"scanningDensity",scanningDensity)
end
if (scanningDensity<0.1) then
	scanningDensity=0.1
end
if (scanningDensity>5) then
	scanningDensity=5
end

simResetGraph(graphHandle)
pts=scanningAngle*scanningDensity+1
p=-scanningAngle*math.pi/360
stepSize=math.pi/(scanningDensity*180)
points={}
modelInverseMatrix=simGetInvertedMatrix(simGetObjectMatrix(modelHandle,-1))
for i=0,pts,1 do
	simSetJointPosition(jointHandle,p)
	p=p+stepSize
	r,dist,pt=simHandleProximitySensor(laserHandle) -- pt is RELATIVE to te rotating laser beam!
	if r>0 then
		-- We put the RELATIVE coordinate of that point into the table that we will return:
		m=simGetObjectMatrix(laserHandle,-1)
		pt=simMultiplyVector(m,pt)
		pt=simMultiplyVector(modelInverseMatrix,pt) -- after this instruction, pt will be relative to the model base!
		table.insert(points,pt[1])
		table.insert(points,pt[2])
		table.insert(points,pt[3])
	end
	simHandleGraph(graphHandle,0.0)
end

-- Now send the data:
if #points>0 then
	pt_string = table.tostring(points)
	--simTubeWrite(communicationTube,simPackFloats(points))
	simTubeWrite(communicationTube,pt_string)
end

-- At the end of a simulation, remove the laser points:
if (simGetSimulationState()==sim_simulation_advancing_lastbeforestop) then
	simResetGraph(graphHandle)
end
--[[
if not console then
	console = simAuxiliaryConsoleOpen("Laser Data",10,00110)
	simAuxiliaryConsoleShow(console,1)
	simAuxiliaryConsolePrint(console,"points")
end
]]
-- To read the data from another script, use following instructions (in that other script):
--
-- INITIALIZATION PHASE:
-- laserScannerHandle=simGetObjectHandle("LaserScanner_2D")
-- laserScannerObjectName=simGetObjectName(laserScannerHandle) -- is not necessarily "LaserScanner_2D"!!!
-- communicationTube=simTubeOpen(0,laserScannerObjectName..'_2D_SCANNER_DATA',1)
--
-- TO READ THE DATA:
-- data=simTubeRead(communicationTube)
-- if (data) then
--     laserDetectedPoints=simUnpackFloats(data)
-- end
--
-- laserDetectedPoints is RELATIVE to the model base!
